token Num{f64}='<number>';
token Add='+' Sub='-' Mul='*' Div='/';
token LPar='(' RPar=')';

start{f64}:
  expr #1
;

expr{f64}:
  term #1 (
    '+' term #2
  | '-' term #3
  )* #4
;

term{f64}:
  atomic #1 (
    '*' atomic #2
  | '/' atomic #3
  )* #4
;

atomic{f64}:
  Num #1
| '(' expr ')' #2
;

start#1 { Ok(expr) }

expr#1 { let mut res = term; }
expr#2 { res += term; }
expr#3 { res -= term; }
expr#4 { Ok(res) }

term#1 { let mut res = atomic; }
term#2 { res *= atomic; }
term#3 { res /= atomic; }
term#4 { Ok(res) }

atomic#1 { Ok(Num.0) }
atomic#2 { Ok(expr) }
